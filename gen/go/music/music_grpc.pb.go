// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0--rc2
// source: music/music.proto

package musicv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MusicClient is the client API for Music service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicClient interface {
	CreateMusic(ctx context.Context, in *CreateMusicRequest, opts ...grpc.CallOption) (*CreateMusicResponse, error)
	GetMusic(ctx context.Context, in *GetMusicRequest, opts ...grpc.CallOption) (*GetMusicResponse, error)
	UpdateMusic(ctx context.Context, in *UpdateMusicRequest, opts ...grpc.CallOption) (*UpdateMusicResponse, error)
	DeleteMusic(ctx context.Context, in *DeleteMusicRequest, opts ...grpc.CallOption) (*DeleteMusicResponse, error)
}

type musicClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicClient(cc grpc.ClientConnInterface) MusicClient {
	return &musicClient{cc}
}

func (c *musicClient) CreateMusic(ctx context.Context, in *CreateMusicRequest, opts ...grpc.CallOption) (*CreateMusicResponse, error) {
	out := new(CreateMusicResponse)
	err := c.cc.Invoke(ctx, "/music.Music/CreateMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) GetMusic(ctx context.Context, in *GetMusicRequest, opts ...grpc.CallOption) (*GetMusicResponse, error) {
	out := new(GetMusicResponse)
	err := c.cc.Invoke(ctx, "/music.Music/GetMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) UpdateMusic(ctx context.Context, in *UpdateMusicRequest, opts ...grpc.CallOption) (*UpdateMusicResponse, error) {
	out := new(UpdateMusicResponse)
	err := c.cc.Invoke(ctx, "/music.Music/UpdateMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) DeleteMusic(ctx context.Context, in *DeleteMusicRequest, opts ...grpc.CallOption) (*DeleteMusicResponse, error) {
	out := new(DeleteMusicResponse)
	err := c.cc.Invoke(ctx, "/music.Music/DeleteMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServer is the server API for Music service.
// All implementations must embed UnimplementedMusicServer
// for forward compatibility
type MusicServer interface {
	CreateMusic(context.Context, *CreateMusicRequest) (*CreateMusicResponse, error)
	GetMusic(context.Context, *GetMusicRequest) (*GetMusicResponse, error)
	UpdateMusic(context.Context, *UpdateMusicRequest) (*UpdateMusicResponse, error)
	DeleteMusic(context.Context, *DeleteMusicRequest) (*DeleteMusicResponse, error)
	mustEmbedUnimplementedMusicServer()
}

// UnimplementedMusicServer must be embedded to have forward compatible implementations.
type UnimplementedMusicServer struct {
}

func (UnimplementedMusicServer) CreateMusic(context.Context, *CreateMusicRequest) (*CreateMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMusic not implemented")
}
func (UnimplementedMusicServer) GetMusic(context.Context, *GetMusicRequest) (*GetMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMusic not implemented")
}
func (UnimplementedMusicServer) UpdateMusic(context.Context, *UpdateMusicRequest) (*UpdateMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMusic not implemented")
}
func (UnimplementedMusicServer) DeleteMusic(context.Context, *DeleteMusicRequest) (*DeleteMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMusic not implemented")
}
func (UnimplementedMusicServer) mustEmbedUnimplementedMusicServer() {}

// UnsafeMusicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServer will
// result in compilation errors.
type UnsafeMusicServer interface {
	mustEmbedUnimplementedMusicServer()
}

func RegisterMusicServer(s grpc.ServiceRegistrar, srv MusicServer) {
	s.RegisterService(&Music_ServiceDesc, srv)
}

func _Music_CreateMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).CreateMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.Music/CreateMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).CreateMusic(ctx, req.(*CreateMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_GetMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).GetMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.Music/GetMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).GetMusic(ctx, req.(*GetMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_UpdateMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).UpdateMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.Music/UpdateMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).UpdateMusic(ctx, req.(*UpdateMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_DeleteMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).DeleteMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/music.Music/DeleteMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).DeleteMusic(ctx, req.(*DeleteMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Music_ServiceDesc is the grpc.ServiceDesc for Music service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Music_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music.Music",
	HandlerType: (*MusicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMusic",
			Handler:    _Music_CreateMusic_Handler,
		},
		{
			MethodName: "GetMusic",
			Handler:    _Music_GetMusic_Handler,
		},
		{
			MethodName: "UpdateMusic",
			Handler:    _Music_UpdateMusic_Handler,
		},
		{
			MethodName: "DeleteMusic",
			Handler:    _Music_DeleteMusic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "music/music.proto",
}
